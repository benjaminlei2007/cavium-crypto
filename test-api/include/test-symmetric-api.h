
/* ====================================================================
 * Copyright (c) 1998-2008 The OpenSSL Project.  All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 * This product includes cryptographic software written by Eric Young
 * (eay@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@cryptsoft.com).
 *
 */

/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
 * All rights reserved.
 * This package is an SSL implementation written
 * by Eric Young (eay@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#ifdef TEST_CPU_CYCLES
	static uint64_t start_cycle ;
	static uint64_t end_cycle ;
	static uint64_t cpucycles = 0;
	static uint64_t mbps = 0;
	static int iter;
	unsigned int core;
	cvmx_sysinfo_t *sysinfo;
#endif

#define DES_CHUNK_SIZE 8 
#define AES_CHUNK_SIZE 16

#ifdef TEST_CPU_CYCLES
	#define PRINT_HDR \
		if(cvmx_is_init_core()) {\
			printf ("\n\n###################################################\n"); \
        	printf ("Printing CPU cycles for packet length :%u bytes\n", inlen ); \
        	printf ("###################################################\n");\
		}		
#else
    #define PRINT_HDR
#endif

#ifndef TEST_CPU_CYCLES
    #define CHECK_RES(str)  \
        if (ret != 0)  {   \
            printf ("%s Failed .. Aborting the Test\n", str);  \
            return -1;  \
        } 
#else
    #define CHECK_RES(str)
#endif

#ifdef TEST_CPU_CYCLES
	#define START_CYCLE  \
 		start_cycle = end_cycle = 0; \
 		sysinfo = cvmx_sysinfo_get();\
 		for (iter = 0; iter < MAX_ITERATIONS; iter++) {  \
 			memcpy (iv, orig_iv, sizeof(iv)); \
 			start_cycle += cvmx_clock_get_count (CVMX_CLOCK_CORE);

	#define END_CYCLE(str) \
 		end_cycle += cvmx_clock_get_count (CVMX_CLOCK_CORE); \
	 	memcpy (iv, orig_iv, sizeof(iv)); \
		} \
 		cpucycles = (end_cycle - start_cycle)/MAX_ITERATIONS; \
 		mbps = (inlen * cpufreq * 8) / cpucycles;\
 		for (core = 0; core < CVMX_MAX_CORES; core++) {\
			if (cvmx_coremask_is_core_set(&sysinfo->core_mask, core) && core == cvmx_get_core_num()){ \
				total_cpucycles+=cpucycles;\
				total_mbps +=mbps;\
			}\
			cvmx_coremask_barrier_sync(&sysinfo->core_mask);\
		}\
		cvmx_coremask_barrier_sync(&sysinfo->core_mask);\
		if(cvmx_is_init_core()){\
 			printf ("API :%-20s total mbps :%-10lu average values per core    cpucycles :%lu mbps :%lu\n", str, total_mbps, (total_cpucycles/numcores), (total_mbps/numcores));\
			total_cpucycles = 0;\
			total_mbps = 0;\
		}
			
	#define END_CYCLE_AES(str,keylen) \
    	end_cycle += cvmx_clock_get_count (CVMX_CLOCK_CORE); \
 		} \
 		cpucycles = (end_cycle - start_cycle)/MAX_ITERATIONS; \
 		mbps = (inlen * cpufreq * 8) / cpucycles;\
 		for (core = 0; core < CVMX_MAX_CORES; core++) {\
			if (cvmx_coremask_is_core_set(&sysinfo->core_mask, core) && core == cvmx_get_core_num()){ \
				total_cpucycles+=cpucycles;\
				total_mbps +=mbps;\
			}\
			cvmx_coremask_barrier_sync(&sysinfo->core_mask);\
		}\
		cvmx_coremask_barrier_sync(&sysinfo->core_mask);\
		if(cvmx_is_init_core()){\
 			printf ("API :%-20s Key length :%-10d total mbps :%-10lu average values per core    cpucycles :%lu mbps :%lu\n", str, keylen, total_mbps, (total_cpucycles/numcores), (total_mbps/numcores));\
			total_cpucycles = 0;\
			total_mbps = 0;\
		}

#else
	#define START_CYCLE
	#define END_CYCLE(str) 
	#define END_CYCLE_AES(str,keylen) 
#endif

typedef struct AES_ecb_nist {
	int key_size;
	char * key;
	char  * plain;
	char  * cipher;
	} AES_ecb_nist_t;

typedef struct AES_cbc_nist {
	int key_size;
	char * key;
	char * iv;
	char  * plain;
	char  * cipher;
	} AES_cbc_nist_t;

typedef struct AES_xts_nist {
	int key_size;
	int dseqnum;
	char * key1;
	char * key2;
	char * plain;
	char * cipher;
	} AES_xts_nist_t;

typedef struct AES_ccm_nist {
	uint32_t m; 
	uint32_t l;
	uint32_t alen; 
	uint32_t plen; 
	uint32_t klen;
	uint64_t key[4];
	uint64_t val[2]; 
	uint8_t input[1024];
	uint8_t output[1024];
	} AES_ccm_nist_t; 
	
typedef struct DES_cbc_nist {
	int key_size;
	char * key;
	char * iv;
	char  * plain;
	char  * cipher;
	} DES_cbc_nist_t;


typedef struct DES_cbc_monte_nist {
	char * monte;
	char * key1;
	char * key2;
	char * key3;
	char * iv;
	char  * plain;
	char  * cipher;
	} DES_cbc_monte_nist_t;

typedef struct DES_ecb_monte_nist {
	char * monte;
	char * key1;
	char * key2;
	char * key3;
	char  * plain;
	char  * cipher;
	} DES_ecb_monte_nist_t;

const DES_ecb_monte_nist_t des_ecb_monte_enc [] = {
	{
		"Monte1",
		"511023abcd6226fe",
		"511023abcd6226fe",
		"511023abcd6226fe",
		"0fe0e22e3f5c8632",
		"91fc75e5b3e81754"
	},
	{
		"Monte1",
		"c1ec574f7f8a31ab",
		"c1ec574f7f8a31ab",
		"c1ec574f7f8a31ab",
		"91fc75e5b3e81754",
		"ed66f33d32f2ab76",
	},
	{
		"Monte1",
		"2c8aa4734c799bdc",
		"2c8aa4734c799bdc",
		"2c8aa4734c799bdc",
		"ed66f33d32f2ab76",
		"fd8655b179b4f4cf",
	},
	{
		"Monte2",
		"b04a2f57913ece34",
		"8af8f1ec3eabb946",
		"b04a2f57913ece34",
		"80fc042501de6527",
		"81c7c97625452735",
	},
	{
		"Monte2",
		"318ce620b57ae901",
		"0270df7094d576bf",
		"318ce620b57ae901",
		"81c7c97625452735",
		"b528d75dfb1e0bb6",
	},
	{
		"Monte2",
		"85a4317c4f64e3b6",
		"762586ad57dfec1f",
		"85a4317c4f64e3b6",
		"b528d75dfb1e0bb6",
		"8e2409af3e830e20",
	},
	{
		"Monte3",
		"9ec2372c86379df4",
		"ad7ac4464f73805d",
		"20c4f87564527c91",
		"b624d6bd41783ab1",
		"8d64960bfb34b096",
	},
	{
		"Monte3",
		"13a7a1267c022c62",
		"2f92daf4e34ce36b",
		"1a4a10ec9789da58",
		"8d64960bfb34b096",
		"e9de6205bdc4185a",
	},
	{
		"Monte3",
		"fb79c223c1c73438",
		"49ea087ca41a6e10",
		"3b4cb394a79e4f07",
		"e9de6205bdc4185a",
		"6804b08c81761c11",
	}

};
const DES_ecb_monte_nist_t des_ecb_monte_dec [] = {
	{
		"Monte1",
		"61cb19efdac23dad",
		"61cb19efdac23dad",
		"61cb19efdac23dad",
		"dca019845ecb3204",
		"2dca732677f80a45"
	},
	{
		"Monte1",
		"bc6b016b85080ea8",
		"bc6b016b85080ea8",
		"bc6b016b85080ea8",
		"abed03f3937eb09a",
		"dca019845ecb3204"
	},
	{
		"Monte1",
		"168602981676bf32",
		"168602981676bf32",
		"168602981676bf32",
		"8fb873b68a12b2d3",
		"abed03f3937eb09a"
	},
	{
		"Monte2",
		"d03862f479e3b345",
		"9d20b9f1f4d99297",
		"d03862f479e3b345",
		"c8889214f82ce240",
		"92e20da63c4bd874"
	},
	{
		"Monte2",
		"19b0f1e080ce5104",
		"eac458d3f1d94091",
		"19b0f1e080ce5104",
		"9ea03a1f3b1aebee",
		"c8889214f82ce240"
	},
	{
		"Monte2",
		"8610cbfebad5baea",
		"fb34bf082c522316",
		"8610cbfebad5baea",
		"bad80266f296429b",
		"9ea03a1f3b1aebee"
	},
	{
		"Monte3",
		"79b63486e0ce37e0",
		"08e65231abae3710",
		"1f5eb69e925ef185",
		"73ef1a1f3007d637",
		"2783aa729432fe96"
	},
	{
		"Monte3",
		"0b582f98d0c8e0d6",
		"45fba86b46ae9725",
		"436876e93426bfba",
		"f008ef4c7ae50010",
		"73ef1a1f3007d637"
	},
	{
		"Monte3",
		"fb51c1d5ab2ce0c7",
		"648549cd8ad6dc58",
		"52dac7dc2f4085e3",
		"944b6fc16d95c1e9",
		"f008ef4c7ae50010"
	}
};

typedef struct DES_ecb_nist {
	int key_size;
	char * key;
	char  * plain;
	char  * cipher;
	} DES_ecb_nist_t;

const DES_ecb_nist_t des_ecb_enc [] = {
	{
		128,
		"0101010101010101",
		"95f8a5e5dd31d900",
		"8000000000000000"
	}
};
const DES_ecb_nist_t des_ecb_dec [] = {
	{
		128,
		"0101010101010101",
		"4bd388ff6cd81d4f",
		"1000000000000000"
	}
};


const DES_cbc_monte_nist_t des_cbc_monte_enc [] = {
	{
		"Monte1",
		"c415fda1ce6ebf2c",
		"c415fda1ce6ebf2c",
		"c415fda1ce6ebf2c",
		"024f5c8688adaf86",
		"f3284fb6599d3a56",
		"9ffe9fe6c4c1dfd3"
	},
	{
		"Monte1",
		"5bea62460bae61fe",
		"5bea62460bae61fe",
		"5bea62460bae61fe",
		"9ffe9fe6c4c1dfd3",
		"e368e0ff04217379",
		"92fd45d74a217eb9"
	},
	{
		"Monte1",
		"c8162691408f1f46",
		"c8162691408f1f46",
		"c8162691408f1f46",
		"92fd45d74a217eb9",
		"b1873556f7912af7",
		"07a41d6840116533"
	},
	{
		"Monte2",
		"fee5791a94b9869b",
		"85e56b8a0151c10e",
		"fee5791a94b9869b",
		"da61f75f9cb75e35",
		"f7f3c89d13fdce5f",
		"f5b62d1079b2c1e9"
	},
	{
		"Monte2",
		"0b52540bec0b4673",
		"bce6cb8529c283ec",
		"0b52540bec0b4673",
		"f5b62d1079b2c1e9",
		"3903a00f299342e3",
		"3c0bf95d88456057"
	},
	{
		"Monte2",
		"3758ad57644f2625",
		"ce13c1fb1c1fb031",
		"3758ad57644f2625",
		"3c0bf95d88456057",
		"73f40b7f35dc32dc",
		"433b18608769a11e"
	},
	{
		"Monte3",
		"e9da37f8dc976d5b",
		"b68c04e3ec982015",
		"f40e08b59729f28f",
		"f8eee1359c6e5440",
		"3bb7a7dba3d59291",
		"a280efdcd83b7929",
	},
	{
		"Monte3",
		"4a5bd92504ad1573",
		"855e13ce9b029b0e",
		"75ae2094fdf11fa7",
		"a280efdcd83b7929",
		"32d2162d779bbb1b",
		"10ef34bc37b848e2",
	},
	{
		"Monte3",
		"5bb5ec9832155d91",
		"b9a25e20da32a889",
		"20867ab592495d89",
		"10ef34bc37b848e2",
		"3cfd4def41313386",
		"c82e87748fa39f83",
	}

};

const AES_xts_nist_t aes_xts_enc [] = {
		{
			128,
			141,
			"a3e40d5bd4b6bbedb2d18c700ad2db22",
			"10c81190646d673cbca53f133eab373c",
			"20e0719405993f09a66ae5bb500e562c",
			"74623551210216ac926b9650b6d3fa52"
		},
		{
			128,
			75,
			"a2ed35e8d082f5e13e78c1d42acf33cf",
			"70e82821a666b2a7606542e43a631226",
			"2d81dcdec507845dcac4af1594aac844",
			"050dc32995cf6cd87224dfa2572709f4"
		},
		{
        	256,
            187,
            "ef010ca1a3663e32534349bc0bae62232a1573348568fb9ef41768a7674f507a",
            "727f98755397d0e0aa32f830338cc7a926c773f09e57b357cd156afbca46e1a0",
            "ed98e01770a853b49db9e6aaf88f0a41b9b56e91a5a2b11d40529254f5523e75",
            "ca20c55e8dc149687d2541de39c3df6300bb5a163c10ced3666b1357db8bd39d",
        },
        {
            256,
            223,
            "c4e6b37e1075969d41a7601aa105dd41b18200a028da1f79f55c4d2db478c4e9",
            "8d9ed491cfe52f31ecb7cbb4891eb779e057392b3b27c19cbe9b4875c8c31c22",
            "87ede402d0561359799a41be042ced9a8e15639165ef1a4d2f6785c394d61e5f",
            "a51037198f3f9fe5d05bef52363acec40e86e3abb834180348d2e08627733e65",
        }
	};
	
	
const AES_xts_nist_t aes_xts_dec [] = {
		{
			128,
			141,
			"a3e40d5bd4b6bbedb2d18c700ad2db22",
			"10c81190646d673cbca53f133eab373c",
			"20e0719405993f09a66ae5bb500e562c",
			"74623551210216ac926b9650b6d3fa52"
		},		
		{
			128,
			75,
			"a2ed35e8d082f5e13e78c1d42acf33cf",
			"70e82821a666b2a7606542e43a631226",
			"2d81dcdec507845dcac4af1594aac844",
			"050dc32995cf6cd87224dfa2572709f4"
		},	
		{
        	256,
            187,
            "ef010ca1a3663e32534349bc0bae62232a1573348568fb9ef41768a7674f507a",
            "727f98755397d0e0aa32f830338cc7a926c773f09e57b357cd156afbca46e1a0",
            "ed98e01770a853b49db9e6aaf88f0a41b9b56e91a5a2b11d40529254f5523e75",
            "ca20c55e8dc149687d2541de39c3df6300bb5a163c10ced3666b1357db8bd39d",
        },
        {
            256,
            223,
            "c4e6b37e1075969d41a7601aa105dd41b18200a028da1f79f55c4d2db478c4e9",
            "8d9ed491cfe52f31ecb7cbb4891eb779e057392b3b27c19cbe9b4875c8c31c22",
            "87ede402d0561359799a41be042ced9a8e15639165ef1a4d2f6785c394d61e5f",
            "a51037198f3f9fe5d05bef52363acec40e86e3abb834180348d2e08627733e65",
        }
	};


const DES_cbc_monte_nist_t des_cbc_monte_dec [] = {
	{
		"Monte1",
		"70f2da0d2c5434c4",
		"70f2da0d2c5434c4",
		"70f2da0d2c5434c4",
		"37ef1c479c4e9a3e",
		"cf7057ec09b5a975",
		"d165c5bf30afed77"
	},
	{
		"Monte1",
		"bf838ce025e09db0",
		"bf838ce025e09db0",
		"bf838ce025e09db0",
		"b6c9b15cab3fb5c7",
		"fb4724e0ea81e49b",
		"cf7057ec09b5a975"
	},
	{
		"Monte1",
		"45c4a801ce61792a",
		"45c4a801ce61792a",
		"45c4a801ce61792a",
		"ee7feab4d7f84c22",
		"1b9f52b1b3ecb2d4",
		"fb4724e0ea81e49b"
	},
	{
		"Monte2",
		"20adef5e94d32fd0",
		"3db0c752b534b94c",
		"20adef5e94d32fd0",
		"822ffdc5cbccfb85",
		"5a745219bdd54d66",
		"da203fbbaae3970c"
	},
	{
		"Monte2",
		"7ad9bc46290762b6",
		"5425794386c78061",
		"7ad9bc46290762b6",
		"6994be1132f2382c",
		"2a1d7c64c7437747",
		"5a745219bdd54d66"
	},
	{
		"Monte2",
		"51c4c123ef4515f1",
		"20f11f70456be058",
		"51c4c123ef4515f1",
		"74d46733c2ac6038",
		"774bf76dd9612c71",
		"2a1d7c64c7437747"
	}
	#if 0
	{
		"Monte3",
		"f8648a8c1ae68f31",
		"6d23baaec8076204",
		"43cd26577f92a891",
		"973d38f46af7b2cd",
		"29a2df7b587e0515",
		"68b6eae9478a5d03"

	},
	{
		"Monte3",
		"d0c754f743988a25",
		"1661c11aa70b37dc",
		"52e51a16c176c119",
		"7a437ab46e0d55d9",
		"4b50ffb906935f48",
		"29a2df7b587e0515"

	},
	{
		"Monte3",
		"9b97ab4f450bd56d",
		"cdb3f294ae0be05e",
		"8f19dad53d25130e",
		"dbd3338e0901d782",
		"c1ad46162a3c69bc",
		"4b50ffb906935f48"
	}
	#endif
};



const DES_cbc_nist_t des_cbc_enc [] = {
	{
		128,
		"0101010101010101",
		"0000000000000000",
		"95f8a5e5dd31d900",
		"8000000000000000"
	}
};
const DES_cbc_nist_t des_cbc_dec [] = {
	{
		128,
		"0101010101010101",
		"0000000000000000",
		"6cc5defaaf04512f",
		"0200000000000000"
	}
};





	const AES_cbc_nist_t aes_cbc_enc [] = {
		{
			128,
			"00000000000000000000000000000000",
			"00000000000000000000000000000000",
			"f34481ec3cc627bacd5dc3fb08f273e6",
			"0336763e966d92595a567cc9ce537f5e"
		}
	
	};
	const AES_cbc_nist_t aes_cbc_dec [] = {			
		{
			128,
			"10a58869d74be5a374cf867cfb473859",
			"00000000000000000000000000000000",
			"00000000000000000000000000000000",
			"6d251e6944b051e04eaa6fb4dbf78465"
		},
		{
			128,
            "00000000000000000000000000000000",
            "00000000000000000000000000000000",
            "f34481ec3cc627bacd5dc3fb08f273e6",
            "0336763e966d92595a567cc9ce537f5e"
		}	
	
	};

	const AES_cbc_nist_t aes_cbc_mct_enc [] = {
		{
			128,
			"8809e7dd3a959ee5d8dbb13f501f2274",
			"e5c0bb535d7d54572ad06d170a0e58ae",
			"1fd4ee65603e6130cfc2a82ab3d56c24",
			"b127a5b4c4692d87483db0c3b0d11e64"
		},
		{
			128,
			"392e4269fefcb36290e601fce0ce3c10",
			"b127a5b4c4692d87483db0c3b0d11e64",
			"4e18f8d377d3d03e497a05763a4d350a",
			"b8b79b153b5d64f7723b0ea539713a91"
		},
		{
			128,
			"8199d97cc5a1d795e2dd0f59d9bf0681",
			"b8b79b153b5d64f7723b0ea539713a91",
			"143a6cfb8cee0a96af453930ffe9c5e3",
			"dd21bf193c6e16eb7fd7b2337fcc754e"
		},
		#if 0
		{
			192,
			"dea64f83cfe6a0a183ddbe865cfca059b3c615c1623d63fc",
			"426fbc087b50b395c0fc81ef9fd6d1aa",
			"cd0b8c8a8179ecb171b64c894a4d60fd",
			"ae6302d22da9458117f5681431fc80df"
		},
		{
			192,
			"f168c36c40d0d7f92dbebc547155e5d8a4337dd553c1e323",
			"ae6302d22da9458117f5681431fc80df",
			"fbdafc0fe9c2a68f2fce8cef8f367758",
			"5255b629c39a8f7463c18da37ac8c251",
		},
		{
			192,
			"3c39001862229ee37feb0a7db2cf6aacc7f2f07629092172",
			"5255b629c39a8f7463c18da37ac8c251",
			"098c23d9da72e1bfcd51c37422f2491a",
			"7c3d88f39195cbbab608fbd9010ee2c0"
		},
		#endif
		{
			256,
			"632bac4fe4db44cfcf18cfa90b43f86f378611b8d968595eb89e7ae98624564a",
			"ff8127621be616803e3f002377730185",
			"90ed17475f0a62bc381ba1f3ffbfff33",
			"4494030b1e828f57e349cbde6499abf3"
		},
		{
			256,
			"c7b8fb8a3bb2985143909d189bfa0c0f731212b3c7ead6095bd7b137e2bdfdb9",
			"4494030b1e828f57e349cbde6499abf3",
			"a49357c5df69dc9e8c8852b190b9f460",
			"072fd9dfa0bc87493e223467fa25a40b"
		},
		{
			256,
			"8eb04615677eaa057afe2408bf526f77743dcb6c6756514065f58550189859b2",
			"072fd9dfa0bc87493e223467fa25a40b",
			"4908bd9f5ccc3254396eb91024a86378",
			"3b4b1b1d3e690742f1f7c127f9109f28"
		}


	};
	const AES_cbc_nist_t aes_cbc_mct_dec [] = {
		{
			128,
			"287b07c78f8e3e1be7c41b3d96c04e6e",
			"41b461f9464fd515d25413b4241002b8",
			"2805d10b127fcd1da528faad4eb2e10b",
			"7c54923b0490a9d4de4ec1ce6790aa4d"
		},
		{
			128,
			"007ed6cc9df1f30642ece190d872af65",
			"2805d10b127fcd1da528faad4eb2e10b",
			"743b755c0d1d287ffd6ccebeb3eee6b3",
			"a7b760be9237b49e8dad24a6063523a6"
		},
		{
			128,
			"7445a39090ecdb79bf802f2e6b9c49d6",
			"743b755c0d1d287ffd6ccebeb3eee6b3",
			"b863f5f51257a388dfd45f57b171fe70",
			"79414e51819ecaafbbb6fd04a3b42fad"
		},
		{
			192,
			"a24ebd4d7a080c28caae984b5098a9ea38cf7280e2c5f122",
			"c5aeb9b51ad5108371c59d0b90816310",
			"886dc6ee8774e7a5b378ac8a2b637e50",
			"eb2c4e2712591ff13b8ac7870c9c404c"
		},
		{
			192,
			"11619627c9d45a5f42c35ea5d7ec4e4f8bb7de0ac9a68f72",
			"886dc6ee8774e7a5b378ac8a2b637e50",
			"0e2021cc9359f58773c4f52a2c9112ec",
			"314400bcc43239a8b32f2b6ab3dc5677"
		},
		{
			192,
			"f0f10e2fa82777d54ce37f6944b5bbc8f8732b20e5379d9e",
			"0e2021cc9359f58773c4f52a2c9112ec",
			"a0393c7f6aa2e97f2b7f9b79f3443262",
			"3d0f6d5b7aea0bd1e190980861f32d8a"
		},
		{
			256,
			"31397ad8cc79c519e0f46e0f70303587e38958d70723b771552336b7771f6311",
			"4139cb54eeac3fcf36ed72941122c40f",
			"f0e50e036baf80cef566d3f9eaa2a9a7",
			"27a1d5c10fe45b801d15f56e654a70f0"
		},
		{
			256,
			"2611f4003fbc38b3cdc023f63065b070136c56d46c8c37bfa045e54e9dbdcab6",
			"f0e50e036baf80cef566d3f9eaa2a9a7",
			"583ae9e3d37b2bb91119106472484730",
			"17288ed8f3c5fdaa2d344df9405585f7"
			
		},
		{
			256,
			"d855e0f013078ef1898f1e94a0af465a4b56bf37bff71c06b15cf52aeff58d86",
			"583ae9e3d37b2bb91119106472484730",
			"410c0f4494faf1a08a7c7513797ff2df",
			"fe4414f02cbbb642444f3d6290caf62a",
		}

	};


	const AES_ecb_nist_t aes_ecb_enc [] = {
		{
			128,
			"00000000000000000000000000000000",
			"f34481ec3cc627bacd5dc3fb08f273e6",
			"0336763e966d92595a567cc9ce537f5e"
		}

	};
	
	const AES_ecb_nist_t aes_ecb_dec [] = {
		{
			128,
			"00000000000000000000000000000000",
			"f34481ec3cc627bacd5dc3fb08f273e6",
			"0336763e966d92595a567cc9ce537f5e"
		},		
		{
			128,
			"10a58869d74be5a374cf867cfb473859",	
			"00000000000000000000000000000000",
			"6d251e6944b051e04eaa6fb4dbf78465"
		},
		{
            128,
            "ffffffffffffffffffffffffffffffff",
            "00000000000000000000000000000000",
            "a1f6258c877d5fcd8964484538bfc92c"
        }
	};
const AES_ecb_nist_t aes_ecb_mct_enc [] = {
		{
			128,
			"139a35422f1d61de3c91787fe0507afd",
			"b9145a768b7dc489a096b546f43b231f",
			"d7c3ffac9031238650901e157364c386"
		},
		{
			128,
			"c459caeebf2c42586c01666a9334b97b",
			"d7c3ffac9031238650901e157364c386",
			"bc3637da2daf8fcf7c68bb28c143a0a4"	
		},
		{
			128,
			"786ffd349283cd971069dd42527719df",
			"bc3637da2daf8fcf7c68bb28c143a0a4",
			"9c88a8db798f48df1ac4936afa959eac"
		},
//};
		{
			192,
			"b9a63e09e1dfc42e93a90d9bad739e5967aef672eedd5da9",
			"85a1f7a58167b389cddc8a9ff175ee26",
			"ee83d85279e022d2048031abeefbc4a4"
		},
		{
			192,
			"3aaa458160ee54c97d2ad5c9d493bc8b632ec7d90026990d",
			"ee83d85279e022d2048031abeefbc4a4",
			"a8f99517b4bd14a16c26bae901417498"
		},
		{
			192,
			"1d17d1bcc74a8584d5d340de602ea82a0f087d300167ed95",
			"a8f99517b4bd14a16c26bae901417498",
			"80286e71937334fd6e90c706abbaf0ff"
		},
		{
			256,
			"f9e8389f5b80712e3886cc1fa2d28a3b8c9cd88a2d4a54c6aa86ce0fef944be0",
			"b379777f9050e2a818f2940cbbd9aba4",
			"6893ebaf0a1fccc704326529fdfb60db"
		},
		{
			256,
			"db9ea5a2284fa17fb63e13bf891c8e42e40f332527559801aeb4ab26126f2b3b",
			"6893ebaf0a1fccc704326529fdfb60db",
			"f3c78a5e85e5439bf26d5818718157d6"
		},
		{
			256,
			"7099ed88e82744228a5303ae2ef6c0d017c8b97ba2b0db9a5cd9f33e63ee7ced",
			"f3c78a5e85e5439bf26d5818718157d6",
			"2326b958b00b3050697eedb08cc20504"
		}
	};
const AES_ecb_nist_t aes_ecb_mct_dec [] = {
		{
			128,
			"0c60e7bf20ada9baa9e1ddf0d1540726",
			"b613b87085fed1bb87f07a574e6d2879",
			"b08a29b11a500ea3aca42c36675b9785"
		},
		{
			128,
			"ba735fcfa55378012e11a7a79f392f5f",
			"5541d7bf6d25c55c0c2296acba756e9e",
			"b613b87085fed1bb87f07a574e6d2879"
		},
		{
			128,
			"ef328870c876bd5d2233310b254c41c1",
			"4c138198d55d0d87d43cdb92fb0b5fc0",
			"5541d7bf6d25c55c0c2296acba756e9e"
		},
		{
			192,
			"4b97585701c03fbebdfa8555024f589f1482c58a00fdd9fd",
			"c7b6581ccc88f7fc26d15d2731e7251b",
			"d0bd0e02ded155e4516be83f42d347a4"
		},
		{
			192,
			"3c98c80336e0f13f7a4cdd49cec7af63325398ad311afce6",
			"01aa957b12c596511484ed7705766c67",
			"c7b6581ccc88f7fc26d15d2731e7251b"
		},
		{
			192,
			"825349971b370dc47be64832dc02393226d775da346c9081",
			"f98c15d93f5daef6047c2760c5df5540",
			"01aa957b12c596511484ed7705766c67"
		},
		{
			256,
			"2b09ba39b834062b9e93f48373b8dd018dedf1e5ba1b8af831ebbacbc92a2643",
			"1f9b9b213f1884fa98b62dd6639fd33b",
			"89649bd0115f30bd878567610223a59d"
		},
		{
			256,
			"58ac71619fdc3ac73a17f285319e1cd492766ac485030e02a95d971daab5f578",
			"aecd334ef8fb0c51b6896ae065d8be28",
			"1f9b9b213f1884fa98b62dd6639fd33b"
		},
		{
			256,
			"f6e3cca2cd628c10625c62cf08b385743cbb598a7df802531fd4fdfdcf6d4b50",
			"f1938dd245c055e9c380336ff8450d9d",
			"aecd334ef8fb0c51b6896ae065d8be28"
		}

	};
	
const AES_ccm_nist_t pkt [] = {
	/*1*/
	{ 
		8, 2, 8, 23, 128,
		{0xc0c1c2c3c4c5c6c7ull,0xc8c9cacbcccdcecfull}, 
		{0x00000003020100a0ull,0xa1a2a3a4a5000000ull}, 
		{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E}, 
		{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x58,0x8C,0x97,0x9A,0x61,0xC6,0x63,0xD2,0xF0,0x66,0xD0,0xC2,0xC0,0xF9,0x89,0x80,0x6D,0x5F,0x6B,0x61,0xDA,0xC3,0x84,0x17,0xE8,0xD1,0x2C,0xFD,0xF9,0x26,0xE0}
	},
	/*2*/
	{ 
		8, 2, 8, 24, 128,
		{0xc0c1c2c3c4c5c6c7ull,0xc8c9cacbcccdcecfull}, 
		{0x00000004030201a0ull,0xa1a2a3a4a5000000ull}, 
		{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,0x1F}, 
		{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x72,0xC9,0x1A,0x36,0xE1,0x35,0xF8,0xCF,0x29,0x1C,0xA8,0x94,0x08,0x5C,0x87,0xE3,0xCC,0x15,0xC4,0x39,0xC9,0xE4,0x3A,0x3B,0xA0,0x91,0xD5,0x6E,0x10,0x40,0x09,0x16}
	},
	/*3*/
	{ 
		8, 2, 8, 25, 128,
		{0xc0c1c2c3c4c5c6c7ull,0xc8c9cacbcccdcecfull}, 
		{0x00000005040302a0ull,0xa1a2a3a4a5000000ull}, 
		{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,0x1F,0x20}, 
		{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x51,0xB1,0xE5,0xF4,0x4A,0x19,0x7D,0x1D,0xA4,0x6B,0x0F,0x8E,0x2D,0x28,0x2A,0xE8,0x71,0xE8,0x38,0xBB,0x64,0xDA,0x85,0x96,0x57,0x4A,0xDA,0xA7,0x6F,0xBD,0x9F,0xB0,0xC5}
	},
	/*4*/
	{ 
		8, 2, 12, 19, 128,
		{0xc0c1c2c3c4c5c6c7ull,0xc8c9cacbcccdcecfull}, 
		{0x00000006050403a0ull,0xa1a2a3a4a5000000ull}, 
		{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E}, 
		{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0xA2,0x8C,0x68,0x65,0x93,0x9A,0x9A,0x79,0xFA,0xAA,0x5C,0x4C,0x2A,0x9D,0x4A,0x91,0xCD,0xAC,0x8C,0x96,0xC8,0x61,0xB9,0xC9,0xE6,0x1E,0xF1}
	},
	/*5*/
	{ 
		8, 2, 12, 20, 128,
		{0xc0c1c2c3c4c5c6c7ull,0xc8c9cacbcccdcecfull}, 
		{0x00000007060504a0ull,0xa1a2a3a4a5000000ull}, 
		{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,0x1F}, 
		{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0xDC,0xF1,0xFB,0x7B,0x5D,0x9E,0x23,0xFB,0x9D,0x4E,0x13,0x12,0x53,0x65,0x8A,0xD8,0x6E,0xBD,0xCA,0x3E,0x51,0xE8,0x3F,0x07,0x7D,0x9C,0x2D,0x93}
	},
	/*6*/
	{ 
		8, 2, 12, 21, 128,
		{0xc0c1c2c3c4c5c6c7ull,0xc8c9cacbcccdcecfull}, 
		{0x00000008070605a0ull,0xa1a2a3a4a5000000ull}, 
		{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,0x1F,0x20}, 
		{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x6F,0xC1,0xB0,0x11,0xF0,0x06,0x56,0x8B,0x51,0x71,0xA4,0x2D,0x95,0x3D,0x46,0x9B,0x25,0x70,0xA4,0xBD,0x87,0x40,0x5A,0x04,0x43,0xAC,0x91,0xCB,0x94}
	},
	/*7*/
	{ 
		10, 2, 8, 23, 128,
		{0xc0c1c2c3c4c5c6c7ull,0xc8c9cacbcccdcecfull}, 
		{0x00000009080706a0ull,0xa1a2a3a4a5000000ull}, 
		{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E}, 
		{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x01,0x35,0xD1,0xB2,0xC9,0x5F,0x41,0xD5,0xD1,0xD4,0xFE,0xC1,0x85,0xD1,0x66,0xB8,0x09,0x4E,0x99,0x9D,0xFE,0xD9,0x6C,0x04,0x8C,0x56,0x60,0x2C,0x97,0xAC,0xBB,0x74,0x90}
	},
	/*8*/
	{ 
		10, 2, 8, 24, 128,
		{0xc0c1c2c3c4c5c6c7ull,0xc8c9cacbcccdcecfull}, 
		{0x0000000a090807a0ull,0xa1a2a3a4a5000000ull}, 
		{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,0x1F},
		{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x7B,0x75,0x39,0x9A,0xC0,0x83,0x1D,0xD2,0xF0,0xBB,0xD7,0x58,0x79,0xA2,0xFD,0x8F,0x6C,0xAE,0x6B,0x6C,0xD9,0xB7,0xDB,0x24,0xC1,0x7B,0x44,0x33,0xF4,0x34,0x96,0x3F,0x34,0xB4}
	},
	/*9*/
	{ 
		10, 2, 8, 25, 128,
		{0xc0c1c2c3c4c5c6c7ull,0xc8c9cacbcccdcecfull}, 
		{0x0000000b0a0908a0ull,0xa1a2a3a4a5000000ull}, 
		{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,0x1F,0x20},
		{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x82,0x53,0x1A,0x60,0xCC,0x24,0x94,0x5A,0x4B,0x82,0x79,0x18,0x1A,0xB5,0xC8,0x4D,0xF2,0x1C,0xE7,0xF9,0xB7,0x3F,0x42,0xE1,0x97,0xEA,0x9C,0x07,0xE5,0x6B,0x5E,0xB1,0x7E,0x5F,0x4E}
	},
	/*10*/
	{ 
		10, 2, 12, 19, 128,
		{0xc0c1c2c3c4c5c6c7ull,0xc8c9cacbcccdcecfull}, 
		{0x0000000c0b0a09a0ull,0xa1a2a3a4a5000000ull}, 
		{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E},
		{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x07,0x34,0x25,0x94,0x15,0x77,0x85,0x15,0x2B,0x07,0x40,0x98,0x33,0x0A,0xBB,0x14,0x1B,0x94,0x7B,0x56,0x6A,0xA9,0x40,0x6B,0x4D,0x99,0x99,0x88,0xDD}
	},
	/*11*/
	{ 
		10, 2, 12, 20, 128,
		{0xc0c1c2c3c4c5c6c7ull,0xc8c9cacbcccdcecfull}, 
		{0x0000000d0c0b0aa0ull,0xa1a2a3a4a5000000ull}, 
		{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,0x1F},
		{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x67,0x6B,0xB2,0x03,0x80,0xB0,0xE3,0x01,0xE8,0xAB,0x79,0x59,0x0A,0x39,0x6D,0xA7,0x8B,0x83,0x49,0x34,0xF5,0x3A,0xA2,0xE9,0x10,0x7A,0x8B,0x6C,0x02,0x2C}
	},
	/*12*/
	{ 
		10, 2, 12, 21, 128,
		{0xc0c1c2c3c4c5c6c7ull,0xc8c9cacbcccdcecfull}, 
		{0x0000000e0d0c0ba0ull,0xa1a2a3a4a5000000ull}, 
		{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,0x1F,0x20},
		{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0xC0,0xFF,0xA0,0xD6,0xF0,0x5B,0xDB,0x67,0xF2,0x4D,0x43,0xA4,0x33,0x8D,0x2A,0xA4,0xBE,0xD7,0xB2,0x0E,0x43,0xCD,0x1A,0xA3,0x16,0x62,0xE7,0xAD,0x65,0xD6,0xDB}
	},
	/*13*/
	{ 
		8, 2, 8, 23, 128,
		{0xd7828d13b2b0bdc3ull,0x25a76236df93cc6bull}, 
		{0x00412b4ea9cdbe3cull,0x9696766cfa000000ull}, 
		{0x0B,0xE1,0xA8,0x8B,0xAC,0xE0,0x18,0xB1,0x08,0xE8,0xCF,0x97,0xD8,0x20,0xEA,0x25,0x84,0x60,0xE9,0x6A,0xD9,0xCF,0x52,0x89,0x05,0x4D,0x89,0x5C,0xEA,0xC4,0x7C},
		{0x0B,0xE1,0xA8,0x8B,0xAC,0xE0,0x18,0xB1,0x4C,0xB9,0x7F,0x86,0xA2,0xA4,0x68,0x9A,0x87,0x79,0x47,0xAB,0x80,0x91,0xEF,0x53,0x86,0xA6,0xFF,0xBD,0xD0,0x80,0xF8,0xE7,0x8C,0xF7,0xCB,0x0C,0xDD,0xD7,0xB3}
	},
	/*14*/
	{ 
		8, 2, 8, 24, 128,
		{0xd7828d13b2b0bdc3ull,0x25a76236df93cc6bull}, 
		{0x0033568ef7b2633cull,0x9696766cfa000000ull}, 
		{0x63,0x01,0x8F,0x76,0xDC,0x8A,0x1B,0xCB,0x90,0x20,0xEA,0x6F,0x91,0xBD,0xD8,0x5A,0xFA,0x00,0x39,0xBA,0x4B,0xAF,0xF9,0xBF,0xB7,0x9C,0x70,0x28,0x94,0x9C,0xD0,0xEC},
		{0x63,0x01,0x8F,0x76,0xDC,0x8A,0x1B,0xCB,0x4C,0xCB,0x1E,0x7C,0xA9,0x81,0xBE,0xFA,0xA0,0x72,0x6C,0x55,0xD3,0x78,0x06,0x12,0x98,0xC8,0x5C,0x92,0x81,0x4A,0xBC,0x33,0xC5,0x2E,0xE8,0x1D,0x7D,0x77,0xC0,0x8A}
	},
	/*15*/
	{ 
		8, 2, 8, 25, 128,
		{0xd7828d13b2b0bdc3ull,0x25a76236df93cc6bull}, 
		{0x00103fe41336713cull,0x9696766cfa000000ull}, 
		{0xAA,0x6C,0xFA,0x36,0xCA,0xE8,0x6B,0x40,0xB9,0x16,0xE0,0xEA,0xCC,0x1C,0x00,0xD7,0xDC,0xEC,0x68,0xEC,0x0B,0x3B,0xBB,0x1A,0x02,0xDE,0x8A,0x2D,0x1A,0xA3,0x46,0x13,0x2E},
		{0xAA,0x6C,0xFA,0x36,0xCA,0xE8,0x6B,0x40,0xB1,0xD2,0x3A,0x22,0x20,0xDD,0xC0,0xAC,0x90,0x0D,0x9A,0xA0,0x3C,0x61,0xFC,0xF4,0xA5,0x59,0xA4,0x41,0x77,0x67,0x08,0x97,0x08,0xA7,0x76,0x79,0x6E,0xDB,0x72,0x35,0x06}
	},
	/*16*/
	{ 
		8, 2, 12, 19, 128,
		{0xd7828d13b2b0bdc3ull,0x25a76236df93cc6bull}, 
		{0x00764c63b8058e3cull,0x9696766cfa000000ull}, 
		{0xD0,0xD0,0x73,0x5C,0x53,0x1E,0x1B,0xEC,0xF0,0x49,0xC2,0x44,0x12,0xDA,0xAC,0x56,0x30,0xEF,0xA5,0x39,0x6F,0x77,0x0C,0xE1,0xA6,0x6B,0x21,0xF7,0xB2,0x10,0x1C},
		{0xD0,0xD0,0x73,0x5C,0x53,0x1E,0x1B,0xEC,0xF0,0x49,0xC2,0x44,0x14,0xD2,0x53,0xC3,0x96,0x7B,0x70,0x60,0x9B,0x7C,0xBB,0x7C,0x49,0x91,0x60,0x28,0x32,0x45,0x26,0x9A,0x6F,0x49,0x97,0x5B,0xCA,0xDE,0xAF}
	},
	/*17*/
	{ 
		8, 2, 12, 20, 128,
		{0xd7828d13b2b0bdc3ull,0x25a76236df93cc6bull}, 
		{0x00f8b678094e3b3cull,0x9696766cfa000000ull}, 
		{0x77,0xB6,0x0F,0x01,0x1C,0x03,0xE1,0x52,0x58,0x99,0xBC,0xAE,0xE8,0x8B,0x6A,0x46,0xC7,0x8D,0x63,0xE5,0x2E,0xB8,0xC5,0x46,0xEF,0xB5,0xDE,0x6F,0x75,0xE9,0xCC,0x0D},
		{0x77,0xB6,0x0F,0x01,0x1C,0x03,0xE1,0x52,0x58,0x99,0xBC,0xAE,0x55,0x45,0xFF,0x1A,0x08,0x5E,0xE2,0xEF,0xBF,0x52,0xB2,0xE0,0x4B,0xEE,0x1E,0x23,0x36,0xC7,0x3E,0x3F,0x76,0x2C,0x0C,0x77,0x44,0xFE,0x7E,0x3C}
	},
	/*18*/
	{ 
		8, 2, 12, 21, 128,
		{0xd7828d13b2b0bdc3ull,0x25a76236df93cc6bull}, 
		{0x00d560912d3f703cull,0x9696766cfa000000ull}, 
		{0xCD,0x90,0x44,0xD2,0xB7,0x1F,0xDB,0x81,0x20,0xEA,0x60,0xC0,0x64,0x35,0xAC,0xBA,0xFB,0x11,0xA8,0x2E,0x2F,0x07,0x1D,0x7C,0xA4,0xA5,0xEB,0xD9,0x3A,0x80,0x3B,0xA8,0x7F},
		{0xCD,0x90,0x44,0xD2,0xB7,0x1F,0xDB,0x81,0x20,0xEA,0x60,0xC0,0x00,0x97,0x69,0xEC,0xAB,0xDF,0x48,0x62,0x55,0x94,0xC5,0x92,0x51,0xE6,0x03,0x57,0x22,0x67,0x5E,0x04,0xC8,0x47,0x09,0x9E,0x5A,0xE0,0x70,0x45,0x51}
	},
	/*19*/
	{ 
		10, 2, 8, 23, 128,
		{0xd7828d13b2b0bdc3ull,0x25a76236df93cc6bull}, 
		{0x0042fff8f1951c3cull,0x9696766cfa000000ull}, 
		{0xD8,0x5B,0xC7,0xE6,0x9F,0x94,0x4F,0xB8,0x8A,0x19,0xB9,0x50,0xBC,0xF7,0x1A,0x01,0x8E,0x5E,0x67,0x01,0xC9,0x17,0x87,0x65,0x98,0x09,0xD6,0x7D,0xBE,0xDD,0x18},
		{0xD8,0x5B,0xC7,0xE6,0x9F,0x94,0x4F,0xB8,0xBC,0x21,0x8D,0xAA,0x94,0x74,0x27,0xB6,0xDB,0x38,0x6A,0x99,0xAC,0x1A,0xEF,0x23,0xAD,0xE0,0xB5,0x29,0x39,0xCB,0x6A,0x63,0x7C,0xF9,0xBE,0xC2,0x40,0x88,0x97,0xC6,0xBA}
	},
	/*20*/
	{ 
		10, 2, 8, 24, 128,
		{0xd7828d13b2b0bdc3ull,0x25a76236df93cc6bull}, 
		{0x00920f40e56cdc3cull,0x9696766cfa000000ull}, 
		{0x74,0xA0,0xEB,0xC9,0x06,0x9F,0x5B,0x37,0x17,0x61,0x43,0x3C,0x37,0xC5,0xA3,0x5F,0xC1,0xF3,0x9F,0x40,0x63,0x02,0xEB,0x90,0x7C,0x61,0x63,0xBE,0x38,0xC9,0x84,0x37},
		{0x74,0xA0,0xEB,0xC9,0x06,0x9F,0x5B,0x37,0x58,0x10,0xE6,0xFD,0x25,0x87,0x40,0x22,0xE8,0x03,0x61,0xA4,0x78,0xE3,0xE9,0xCF,0x48,0x4A,0xB0,0x4F,0x44,0x7E,0xFF,0xF6,0xF0,0xA4,0x77,0xCC,0x2F,0xC9,0xBF,0x54,0x89,0x44}
	},
	/*21*/
	{ 
		10, 2, 8, 25, 128,
		{0xd7828d13b2b0bdc3ull,0x25a76236df93cc6bull}, 
		{0x0027ca0c7120bc3cull,0x9696766cfa000000ull}, 
		{0x44,0xA3,0xAA,0x3A,0xAE,0x64,0x75,0xCA,0xA4,0x34,0xA8,0xE5,0x85,0x00,0xC6,0xE4,0x15,0x30,0x53,0x88,0x62,0xD6,0x86,0xEA,0x9E,0x81,0x30,0x1B,0x5A,0xE4,0x22,0x6B,0xFA},
		{0x44,0xA3,0xAA,0x3A,0xAE,0x64,0x75,0xCA,0xF2,0xBE,0xED,0x7B,0xC5,0x09,0x8E,0x83,0xFE,0xB5,0xB3,0x16,0x08,0xF8,0xE2,0x9C,0x38,0x81,0x9A,0x89,0xC8,0xE7,0x76,0xF1,0x54,0x4D,0x41,0x51,0xA4,0xED,0x3A,0x8B,0x87,0xB9,0xCE}
	},
	/*22*/
	{ 
		10, 2, 12, 19, 128,
		{0xd7828d13b2b0bdc3ull,0x25a76236df93cc6bull}, 
		{0x005b8ccbcd9af83cull,0x9696766cfa000000ull}, 
		{0xEC,0x46,0xBB,0x63,0xB0,0x25,0x20,0xC3,0x3C,0x49,0xFD,0x70,0xB9,0x6B,0x49,0xE2,0x1D,0x62,0x17,0x41,0x63,0x28,0x75,0xDB,0x7F,0x6C,0x92,0x43,0xD2,0xD7,0xC2},
		{0xEC,0x46,0xBB,0x63,0xB0,0x25,0x20,0xC3,0x3C,0x49,0xFD,0x70,0x31,0xD7,0x50,0xA0,0x9D,0xA3,0xED,0x7F,0xDD,0xD4,0x9A,0x20,0x32,0xAA,0xBF,0x17,0xEC,0x8E,0xBF,0x7D,0x22,0xC8,0x08,0x8C,0x66,0x6B,0xE5,0xC1,0x97}
	},
	/*23*/
	{ 
		10, 2, 12, 20, 128,
		{0xd7828d13b2b0bdc3ull,0x25a76236df93cc6bull}, 
		{0x003ebe94044b9a3cull,0x9696766cfa000000ull}, 
		{0x47,0xA6,0x5A,0xC7,0x8B,0x3D,0x59,0x42,0x27,0xE8,0x5E,0x71,0xE2,0xFC,0xFB,0xB8,0x80,0x44,0x2C,0x73,0x1B,0xF9,0x51,0x67,0xC8,0xFF,0xD7,0x89,0x5E,0x33,0x70,0x76},
		{0x47,0xA6,0x5A,0xC7,0x8B,0x3D,0x59,0x42,0x27,0xE8,0x5E,0x71,0xE8,0x82,0xF1,0xDB,0xD3,0x8C,0xE3,0xED,0xA7,0xC2,0x3F,0x04,0xDD,0x65,0x07,0x1E,0xB4,0x13,0x42,0xAC,0xDF,0x7E,0x00,0xDC,0xCE,0xC7,0xAE,0x52,0x98,0x7D}
	},
	/*24*/
	{ 
		10, 2, 12, 21, 128,
		{0xd7828d13b2b0bdc3ull,0x25a76236df93cc6bull}, 
		{0x008d493b30ae8b3cull,0x9696766cfa000000ull}, 
		{0x6E,0x37,0xA6,0xEF,0x54,0x6D,0x95,0x5D,0x34,0xAB,0x60,0x59,0xAB,0xF2,0x1C,0x0B,0x02,0xFE,0xB8,0x8F,0x85,0x6D,0xF4,0xA3,0x73,0x81,0xBC,0xE3,0xCC,0x12,0x85,0x17,0xD4},
		{0x6E,0x37,0xA6,0xEF,0x54,0x6D,0x95,0x5D,0x34,0xAB,0x60,0x59,0xF3,0x29,0x05,0xB8,0x8A,0x64,0x1B,0x04,0xB9,0xC9,0xFF,0xB5,0x8C,0xC3,0x90,0x90,0x0F,0x3D,0xA1,0x2A,0xB1,0x6D,0xCE,0x9E,0x82,0xEF,0xA1,0x6D,0xA6,0x20,0x59}
	},
	/*25- Test Vectors with no Associated Data start here. Vectors 26 onwards came from the NIST website*/
	{
		8, 2, 0, 23, 128,
		{0xc0c1c2c3c4c5c6c7ull,0xc8c9cacbcccdcecfull},
		{0x00000003020100a0ull,0xa1a2a3a4a5000000ull},
		{0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e},
		{0x58,0x8c,0x97,0x9a,0x61,0xc6,0x63,0xd2,0xf0,0x66,0xd0,0xc2,0xc0,0xf9,0x89,0x80,0x6d,0x5f,0x6b,0x61,0xda,0xc3,0x84,0x7c,0x20,0x51,0xa7,0xae,0x20,0x0b,0xcf}
	},
	/*26*/
	{
		16, 2, 0, 32, 128,
		{0xb16efc2f6de1edbeull,0xe35a3030185e8167ull},
		{0x3296f0c16238bc8bull,0xb65a31d32b000000ull},
		{0xe3,0x14,0xe8,0x25,0x71,0xf3,0xed,0x74,0xad,0x01,0xb7,0x74,0xd6,0x55,0x96,0x84,0xd8,0xf3,0x0d,0x6f,0x68,0x92,0x84,0x4c,0x4f,0xa3,0x3d,0xa2,0x06,0x8e,0x89,0xd0},
		{0x56,0x92,0x0b,0x16,0xb8,0xa0,0x52,0x9f,0x11,0x64,0xa3,0x6c,0x86,0xd7,0x77,0x71,0x52,0x19,0xe9,0xa1,0x3d,0x8c,0xec,0xbb,0x66,0x8f,0x14,0x0c,0xa0,0x53,0xd4,0xff,0xbd,0xdf,0xc1,0xe9,0x44,0x51,0xbc,0x8f,0xea,0x65,0x61,0xfe,0xc9,0xb9,0x55,0xb7}
	},
	/*27*/
	{
		16, 2, 0, 32, 128,
		{0xb16efc2f6de1edbeull,0xe35a3030185e8167ull},
		{0x3296f0c16238bc8bull,0xb65a31d32b000000ull},
		{0x80,0xc0,0x37,0x9d,0xb6,0x7a,0x36,0x5a,0x92,0xf3,0xe3,0x47,0x31,0x24,0x68,0xb6,0x2f,0x88,0x5e,0xa7,0x1a,0xc6,0xe6,0x8f,0x27,0x90,0xf5,0x59,0x24,0xcb,0xef,0xab},
		{0x35,0x46,0xd4,0xae,0x7f,0x29,0x89,0xb1,0x2e,0x96,0xf7,0x5f,0x61,0xa6,0x89,0x43,0xa5,0x62,0xba,0x69,0x4f,0xd8,0x8e,0x78,0x0e,0xbc,0xdc,0xf7,0x82,0x16,0xb2,0x84,0x61,0x2e,0x29,0xe6,0x68,0xaf,0xfd,0xe8,0x9e,0x24,0xb5,0x1d,0xa7,0x0a,0x81,0x17}
	},
	/*28*/
	{
		16, 2, 0, 32, 128,
		{0xb16efc2f6de1edbeull,0xe35a3030185e8167ull},
		{0x3296f0c16238bc8bull,0xb65a31d32b000000ull},
		{0xc9,0xae,0x36,0xe4,0x38,0x96,0x1c,0x9c,0x14,0x32,0xf9,0x30,0x1d,0x10,0xb8,0x2d,0xb5,0xd9,0xe6,0x3d,0xf1,0x1f,0x68,0x06,0xf0,0x55,0x69,0x4f,0x6b,0x1f,0x97,0x64},
		{0x7c,0x28,0xd5,0xd7,0xf1,0xc5,0xa3,0x77,0xa8,0x57,0xed,0x28,0x4d,0x92,0x59,0xd8,0x3f,0x33,0x02,0xf3,0xa4,0x01,0x00,0xf1,0xd9,0x79,0x40,0xe1,0xcd,0xc2,0xca,0x4b,0x34,0x84,0x35,0x83,0x82,0x24,0xf6,0xd8,0x13,0xae,0x2a,0x6d,0x12,0xfa,0x0c,0x57}
	},
	/*29*/
	{
		16, 2, 0, 32, 128,
		{0xb16efc2f6de1edbeull,0xe35a3030185e8167ull},
		{0x3296f0c16238bc8bull,0xb65a31d32b000000ull},
		{0x39,0x0a,0x17,0x64,0x4f,0x88,0xa2,0xf3,0x51,0xb8,0xab,0x4b,0x33,0x92,0xde,0xb6,0x29,0x4a,0x29,0xb7,0xba,0x1a,0x73,0xee,0x16,0x41,0x8b,0x3d,0xa9,0x4c,0x5e,0x29},
		{0x8c,0x8c,0xf4,0x57,0x86,0xdb,0x1d,0x18,0xed,0xdd,0xbf,0x53,0x63,0x10,0x3f,0x43,0xa3,0xa0,0xcd,0x79,0xef,0x04,0x1b,0x19,0x3f,0x6d,0xa2,0x93,0x0f,0x91,0x03,0x06,0xba,0x72,0xea,0xad,0xab,0x8d,0xf4,0x73,0x17,0xe4,0x36,0x2d,0xca,0x0f,0x59,0xb9}
	},
	/*30*/
	{
		16, 2, 0, 32, 128,
		{0xb16efc2f6de1edbeull,0xe35a3030185e8167ull},
		{0x3296f0c16238bc8bull,0xb65a31d32b000000ull},
		{0x2f,0xe4,0x74,0x29,0x8c,0xce,0xf4,0x32,0x1b,0x65,0xa9,0xe2,0xdb,0xf7,0xbc,0x91,0x51,0x49,0xe9,0xdd,0x35,0x81,0xd3,0xaa,0x6c,0x43,0x9b,0x68,0x36,0x1b,0xb0,0x95},
		{0x9a,0x62,0x97,0x1a,0x45,0x9d,0x4b,0xd9,0xa7,0x00,0xbd,0xfa,0x8b,0x75,0x5d,0x64,0xdb,0xa3,0x0d,0x13,0x60,0x9f,0xbb,0x5d,0x45,0x6f,0xb2,0xc6,0x90,0xc6,0xed,0xba,0x53,0xe9,0xbb,0x4b,0xc0,0x68,0x8a,0xfe,0x79,0x8d,0xf9,0x11,0x22,0xaf,0x0f,0x86}
	},
	/*31*/
	{
		16, 2, 0, 32, 128,
		{0xb16efc2f6de1edbeull,0xe35a3030185e8167ull},
		{0x3296f0c16238bc8bull,0xb65a31d32b000000ull},
		{0x37,0x49,0x21,0xa0,0x80,0x75,0xc7,0x6d,0x1b,0xe0,0x14,0x23,0x64,0x08,0xd9,0x5c,0x5b,0x76,0xcb,0x0f,0xf0,0xf4,0xe0,0x61,0x7e,0xfb,0xfc,0xbe,0x95,0x6b,0xcd,0x29},
		{0x82,0xcf,0xc2,0x93,0x49,0x26,0x78,0x86,0xa7,0x85,0x00,0x3b,0x34,0x8a,0x38,0xa9,0xd1,0x9c,0x2f,0xc1,0xa5,0xea,0x88,0x96,0x57,0xd7,0xd5,0x10,0x33,0xb6,0x90,0x06,0x64,0x9f,0xa3,0x80,0x34,0x0b,0xdd,0x8d,0xb5,0xcc,0xf6,0xc6,0x3b,0x77,0xb6,0x78}
	},
	/*32*/
	{
		16, 2, 0, 32, 128,
		{0xb16efc2f6de1edbeull,0xe35a3030185e8167ull},
		{0x3296f0c16238bc8bull,0xb65a31d32b000000ull},
		{0xb4,0x06,0x3d,0x85,0x90,0xb3,0xae,0x02,0xeb,0x78,0x2a,0x7a,0x06,0xd9,0x2a,0x4b,0x5c,0xbc,0x14,0x19,0x90,0x85,0xc7,0x13,0xa5,0x7f,0x74,0x78,0x6d,0x7e,0xb1,0x5a},
		{0x01,0x80,0xde,0xb6,0x59,0xe0,0x11,0xe9,0x57,0x1d,0x3e,0x62,0x56,0x5b,0xcb,0xbe,0xd6,0x56,0xf0,0xd7,0xc5,0x9b,0xaf,0xe4,0x8c,0x53,0x5d,0xd6,0xcb,0xa3,0xec,0x75,0x56,0x56,0x08,0x64,0x9c,0x34,0x0c,0xc7,0x02,0xdf,0xd4,0x1d,0x62,0xbc,0xd1,0x46}
	},
	/*33*/
	{
		16, 2, 0, 32, 128,
		{0xb16efc2f6de1edbeull,0xe35a3030185e8167ull},
		{0x3296f0c16238bc8bull,0xb65a31d32b000000ull},
		{0x36,0x7f,0x57,0x26,0x61,0xa9,0x17,0x73,0x1d,0xd3,0xc0,0x3b,0xba,0x5b,0x50,0x55,0x48,0x5f,0x78,0x84,0x0a,0x69,0xa8,0x41,0x27,0x52,0x6d,0xbb,0xa3,0x60,0xfc,0x1d},
		{0x83,0xf9,0xb4,0x15,0xa8,0xfa,0xa8,0x98,0xa1,0xb6,0xd4,0x23,0xea,0xd9,0xb1,0xa0,0xc2,0xb5,0x9c,0x4a,0x5f,0x77,0xc0,0xb6,0x0e,0x7e,0x44,0x15,0x05,0xbd,0xa1,0x32,0x29,0xd5,0x3f,0x96,0xf9,0xdd,0x77,0x8c,0x9a,0x12,0x37,0x33,0x20,0x20,0x8b,0x6e}
	},
	/*34*/
	{
		16, 2, 0, 32, 128,
		{0xb16efc2f6de1edbeull,0xe35a3030185e8167ull},
		{0x3296f0c16238bc8bull,0xb65a31d32b000000ull},
		{0x86,0x41,0x1e,0x4b,0xa6,0x5d,0x8e,0xeb,0x33,0xaf,0xf2,0xf0,0xce,0x1d,0x28,0x14,0x5c,0xcd,0x4d,0x48,0x14,0xe7,0x77,0x9d,0xd6,0x9c,0xa7,0x64,0xbf,0x67,0xf9,0x94},
		{0x33,0xc7,0xfd,0x78,0x6f,0x0e,0x31,0x00,0x8f,0xca,0xe6,0xe8,0x9e,0x9f,0xc9,0xe1,0xd6,0x27,0xa9,0x86,0x41,0xf9,0x1f,0x6a,0xff,0xb0,0x8e,0xca,0x19,0xba,0xa4,0xbb,0xe4,0x3a,0x5b,0x89,0x24,0x8c,0x3c,0x5b,0x2b,0xa6,0x15,0xc6,0x87,0x76,0xfa,0x4e}
	},
	/*35*/
	{
		16, 2, 0, 32, 128,
		{0xb16efc2f6de1edbeull,0xe35a3030185e8167ull},
		{0x3296f0c16238bc8bull,0xb65a31d32b000000ull},
		{0xd1,0xbd,0xd0,0x04,0x51,0x20,0x3c,0x3d,0x6c,0xbd,0xe0,0x20,0x97,0x00,0x06,0x1e,0x8e,0x8a,0x5e,0x76,0xa3,0x31,0xf4,0x58,0x56,0x48,0x5e,0x4a,0x27,0x20,0x3a,0xcc},
		{0x64,0x3b,0x33,0x37,0x98,0x73,0x83,0xd6,0xd0,0xd8,0xf4,0x38,0xc7,0x82,0xe7,0xeb,0x04,0x60,0xba,0xb8,0xf6,0x2f,0x9c,0xaf,0x7f,0x64,0x77,0xe4,0x81,0xfd,0x67,0xe3,0x6d,0x5e,0xa1,0x47,0x75,0xed,0xfd,0xeb,0x69,0x20,0x65,0x8a,0xe4,0xbe,0x31,0x40}
	},
	/* Following Test Vectors are taken from NIST */
	/*1*/
	{ 
		4, 8, 8, 4, 128,
		{0x4041424344454647ull,0x48494a4b4c4d4e4full},
		{0x10111213141516ull,0x00ull},	
		{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x20,0x21,0x22,0x23}, 
		{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x71,0x62,0x01,0x5b,0x4d,0xac,0x25,0x5d}
	},	
	/*2*/
	{ 
		6, 7, 16, 16, 128,
		{0x4041424344454647ull,0x48494a4b4c4d4e4full},
		{0x1011121314151617ull,0x00ull},	
		{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f}, 
		{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0xd2,0xa1,0xf0,0xe0,0x51,0xea,0x5f,0x62,0x08,0x1a,0x77,0x92,0x07,0x3d,0x59,0x3d,0x1f,0xc6,0x4f,0xbf,0xac,0xcd}
	},
	/*3*/
	{ 
		8, 3, 20, 24, 128,
		{0x4041424344454647ull,0x48494a4b4c4d4e4full},
		{0x1011121314151617ull,0x18191a1b1c1d1e1full},	
		{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,0x11,0x12,0x13,0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37}, 
		{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,0x11,0x12,0x13,0xe3,0xb2,0x01,0xa9,0xf5,0xb7,0x1a,0x7a,0x9b,0x1c,0xea,0xec,0xcd,0x97,0xe7,0x0b,0x61,0x76,0xaa,0xd9,0xa4,0x42,0x8a,0xa5,0x48,0x43,0x92,0xfb,0xc1,0xb0,0x99,0x51}
	},
    //NIST  WEBSITE DATA VTT192
    /*1*/
	{
        4,2,32,24,192,
        {0x11FD45743D946E6Dull, 0x37341FEC49947E8Cull, 0x70482494A8F07FCCull},
        {0xC6AEEBCB146CFAFAull, 0xAE66F78AAB000000ull},
        {0x7D, 0xC8, 0xC5, 0x21, 0x44, 0xA7, 0xCB, 0x65, 0xB3, 0xE5, 0xA8, 0x46, 0xE8, 0xFD, 0x7E, 0xAE, 0x37, 0xBF, 0x69, 0x96, 0xC2, 0x99, 0xB5, 0x6E, 0x49, 0x14, 0x4E, 0xBF, 0x43, 0xA1, 0x77, 0x0F,0xEE, 0x7E, 0x60, 0x75, 0xBA, 0x52, 0x84, 0x6D, 0xE5, 0xD6, 0x25, 0x49, 0x59, 0xA1, 0x8A, 0xFF, 0xC4, 0xFA, 0xF5, 0x9C, 0x8E, 0xF6, 0x34, 0x89},
        { 0x7D, 0xC8, 0xC5, 0x21, 0x44, 0xA7, 0xCB, 0x65, 0xB3, 0xE5, 0xA8, 0x46, 0xE8, 0xFD, 0x7E, 0xAE, 0x37, 0xBF, 0x69, 0x96, 0xC2, 0x99, 0xB5, 0x6E, 0x49, 0x14, 0x4E, 0xBF, 0x43, 0xA1, 0x77, 0x0F,0x13, 0x7D, 0x9D, 0xA5, 0x9B, 0xAF, 0x5C, 0xBF, 0xD4, 0x66, 0x20, 0xC5, 0xF2, 0x98, 0xFC, 0x76, 0x6D, 0xE1, 0x0A, 0xC6, 0x8E, 0x77, 0x4E, 0xDF,0x1f,0x2c,0x5b,0xad},
    },
    /*2*/
	{
    	6,2,32,24,192,
        {0x146A163BBF10746Eull,0x7C1201546BA46DE7ull,0x69BE23F9D7CC2C80ull},
        {0xF5827E51707D8D64ull,0xBB522985BB000000ull},
        { 0x59, 0x9B, 0x12, 0xEB, 0xD3, 0x34, 0x7A, 0x5A, 0xD0, 0x98, 0x77, 0x2C, 0x44, 0xC4, 0x9E, 0xED, 0x95, 0x4E, 0xC2, 0x7C, 0x3B, 0xA6, 0x20, 0x6D, 0x89, 0x9D, 0xDA, 0xAB, 0xCA, 0x23, 0xA7, 0x62, 0x47, 0x3B, 0x66, 0x00, 0x55, 0x9A, 0xEF, 0xB6, 0x7F, 0x79, 0x76, 0xF0, 0xA5, 0xCC, 0x74, 0x4F, 0xB4, 0x56, 0xEF, 0xD8, 0x6F, 0x61, 0x56, 0x48},
        {0x59, 0x9B, 0x12, 0xEB, 0xD3, 0x34, 0x7A, 0x5A, 0xD0, 0x98, 0x77, 0x2C, 0x44, 0xC4, 0x9E, 0xED, 0x95, 0x4E, 0xC2, 0x7C, 0x3B, 0xA6, 0x20, 0x6D, 0x89, 0x9D, 0xDA, 0xAB, 0xCA, 0x23, 0xA7, 0x62, 0x26, 0xD2, 0xBE, 0x30, 0xE1, 0x71, 0x43, 0x9D, 0x54, 0xA0, 0xFE, 0xC2, 0x91, 0xC6, 0x02, 0x4D, 0x1D, 0xE0, 0x9D, 0x61, 0xB4, 0x4F, 0x53, 0x25,0x8B,0xA1,0x36,0x04,0x06,0xF9}
	},
	//NIST  WEBSITE DATA VTT256
    /*1*/
	{
        4,2,32,24,256,
        {0x9074B1AE4CA3342Full,0xE5BF6F14BCF2F279ull,0x04F0B15179D95A65ull,0x4F61E699692E6F71ull},
        {0x2E1E0132468500D4ull,0xBD47862563000000ull},
        {0x3C, 0x5F, 0x54, 0x04, 0x37, 0x0A, 0xBD, 0xCB, 0x1E, 0xDD, 0xE9, 0x9D, 0xE6, 0x0D, 0x06, 0x82, 0xC6, 0x00, 0xB0, 0x34, 0xE0, 0x63, 0xB7, 0xD3, 0x23, 0x77, 0x23, 0xDA, 0x70, 0xAB, 0x75, 0x52, 0x23, 0x90, 0x29, 0xF1, 0x50, 0xBC, 0xCB, 0xD6, 0x7E, 0xDB, 0xB6, 0x7F, 0x8A, 0xE4, 0x56, 0xB4, 0xEA, 0x06, 0x6A, 0x4B, 0xEE, 0xE0, 0x65, 0xF9},
        { 0x3C, 0x5F, 0x54, 0x04, 0x37, 0x0A, 0xBD, 0xCB, 0x1E, 0xDD, 0xE9, 0x9D, 0xE6, 0x0D, 0x06, 0x82, 0xC6, 0x00, 0xB0, 0x34, 0xE0, 0x63, 0xB7, 0xD3, 0x23, 0x77, 0x23, 0xDA, 0x70, 0xAB, 0x75, 0x52, 0x9C, 0x8D, 0x5D, 0xD2, 0x27, 0xFD, 0x9F, 0x81, 0x23, 0x76, 0x01, 0x83, 0x0A, 0xFE, 0xE4, 0xF0, 0x11, 0x56, 0x36, 0xC8, 0xE5, 0xD5, 0xFD, 0x74, 0x3C, 0xB9, 0xAF, 0xED}
    },
    /*2*/
	{
        6,2,32,24,256,
        {0x8596A69890B0E47Dull,0x43AEECA54B520293ull,0x31DA06FAE63AA324ull,0x9FAACA94E2605FEBull},
        {0x20442E1C3F3C8891ull,0x9C39978B78000000ull},
        { 0x4E, 0x0D, 0x3A, 0xA5, 0x02, 0xBD, 0x03, 0xFE, 0x17, 0x61, 0xB1, 0x67, 0xC4, 0xE0, 0xDF, 0x1D, 0x22, 0x83, 0x01, 0xD3, 0xEB, 0xAA, 0x4A, 0x02, 0x81, 0xBE, 0xCD, 0x81, 0x32, 0x66, 0xE2, 0x55, 0xF0, 0xB0, 0x65, 0xDA, 0x6E, 0xCB, 0x9D, 0xDC, 0xAB, 0x85, 0x51, 0x52, 0xD3, 0xB4, 0x15, 0x50, 0x37, 0xAD, 0xFA, 0x75, 0x8B, 0xA9, 0x60, 0x70},
        { 0x4E, 0x0D, 0x3A, 0xA5, 0x02, 0xBD, 0x03, 0xFE, 0x17, 0x61, 0xB1, 0x67, 0xC4, 0xE0, 0xDF, 0x1D, 0x22, 0x83, 0x01, 0xD3, 0xEB, 0xAA, 0x4A, 0x02, 0x81, 0xBE, 0xCD, 0x81, 0x32, 0x66, 0xE2, 0x55, 0xD6, 0xA0, 0xF3, 0x77, 0xF7, 0xC1, 0xB1, 0x4D, 0xCD, 0xBA, 0x72, 0x9C, 0xAE, 0x52, 0x71, 0xB0, 0x27, 0xE7, 0x1C, 0xC7, 0x85, 0x01, 0x73, 0xEC, 0x26, 0x58, 0x67, 0xA2, 0x9E, 0xB3}
	}
};

typedef struct aes_gcm {
	int Keylen;
	int IVlen;
	int PTlen;
	int AADlen;
	int Taglen;
	char * key;
	char * iv;
	char * ct;
	char * aad;
	char * tag;
	char * pt;
} aes_gcm_t;

typedef struct Aes_Ctr {
	uint32_t nonce;
	uint64_t iv;
	int key_len;
	uint8_t key[32];
	int inbuff_size;
	uint8_t inbuff[MAX_BUFF_SIZE];
	uint8_t exp_buff [MAX_BUFF_SIZE];
}aes_ctr_t;

const aes_ctr_t aes_ctr_rfc [] = {
	{
		0x00000030,
		0x0,
		128,
		{
			0xae,0x68,0x52,0xf8,0x12,0x10,0x67,0xcc,
			0x4b,0xf7,0xa5,0x76,0x55,0x77,0xf3,0x9e
		},
		16,
		{
			0x53, 0x69, 0x6E, 0x67,0x6C, 0x65, 0x20, 0x62,
			0x6C, 0x6F, 0x63 ,0x6B, 0x20, 0x6D, 0x73, 0x67
		},
		{
			0xE4, 0x09, 0x5D, 0x4F, 0xB7, 0xA7, 0xB3, 0x79, 
			0x2D, 0x61, 0x75, 0xA3, 0x26, 0x13, 0x11, 0xB8
		}
	},
	{
		0x006CB6DB,
		0xC0543B59DA48D90B,
		128,
		{
			0x7E, 0x24, 0x06, 0x78, 0x17, 0xFA, 0xE0, 0xD7,
			0x43, 0xD6, 0xCE, 0x1F, 0x32, 0x53, 0x91, 0x63
		},
		32,
		{
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
			0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
			0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F
		},
		{
			0x51, 0x04, 0xA1, 0x06, 0x16, 0x8A, 0x72, 0xD9, 
			0x79, 0x0D, 0x41, 0xEE, 0x8E, 0xDA, 0xD3, 0x88, 
			0xEB, 0x2E, 0x1E, 0xFC, 0x46, 0xDA, 0x57, 0xC8, 
			0xFC, 0xE6, 0x30, 0xDF, 0x91, 0x41, 0xBE, 0x28
		}

	},
	{
		0x00E0017B,
		0x27777F3F4A1786F0,
		128,
		{
			0x76, 0x91, 0xBE, 0x03, 0x5E, 0x50, 0x20, 0xA8,
			0xAC, 0x6E, 0x61, 0x85, 0x29, 0xF9, 0xA0, 0xDC
		},
		36,
		{
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
			0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
			0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
			0x20, 0x21, 0x22, 0x23
		},
		{
			0xC1, 0xCF, 0x48, 0xA8, 0x9F, 0x2F, 0xFD, 0xD9, 
			0xCF, 0x46, 0x52, 0xE9, 0xEF, 0xDB, 0x72, 0xD7, 
			0x45, 0x40, 0xA4, 0x2B, 0xDE, 0x6D, 0x78, 0x36, 
			0xD5, 0x9A, 0x5C, 0xEA, 0xAE, 0xF3, 0x10, 0x53,
			0x25, 0xB2, 0x07, 0x2F
		}

	},
	{
		0x00000048,
		0x36733C147D6D93CB,
		192,
		{
			0x16, 0xAF, 0x5B, 0x14, 0x5F, 0xC9, 0xF5, 0x79,
			0xC1, 0x75, 0xF9, 0x3E, 0x3B, 0xFB, 0x0E, 0xED,
			0x86, 0x3D, 0x06, 0xCC, 0xFD, 0xB7, 0x85, 0x15
		},
		16,
		{
			0x53, 0x69, 0x6E, 0x67, 0x6C, 0x65, 0x20, 0x62, 
			0x6C, 0x6F, 0x63, 0x6B, 0x20, 0x6D, 0x73, 0x67, 
		},
		{
			0x4B, 0x55, 0x38, 0x4F, 0xE2, 0x59, 0xC9, 0xC8, 
			0x4E, 0x79, 0x35, 0xA0, 0x03, 0xCB, 0xE9, 0x28
		}

	},
	{
		0x0096B03B,
		0x020C6EADC2CB500D,
		192,
		{
			0x7C, 0x5C, 0xB2, 0x40, 0x1B, 0x3D, 0xC3, 0x3C,
			0x19, 0xE7, 0x34, 0x08, 0x19, 0xE0, 0xF6, 0x9C,
			0x67, 0x8C, 0x3D, 0xB8, 0xE6, 0xF6, 0xA9, 0x1A
		},
		32,
		{
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
			0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
			0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F
		},
		{
			0x45, 0x32, 0x43, 0xFC, 0x60, 0x9B, 0x23, 0x32, 
			0x7E, 0xDF, 0xAA, 0xFA, 0x71, 0x31, 0xCD, 0x9F, 
			0x84, 0x90, 0x70, 0x1C, 0x5A, 0xD4, 0xA7, 0x9C, 
			0xFC, 0x1F, 0xE0, 0xFF, 0x42, 0xF4, 0xFB, 0x00
		}

	},
	{
		0x0007BDFD,
		0x5CBD60278DCC0912,
		192,
		{
			0x02, 0xBF, 0x39, 0x1E, 0xE8, 0xEC, 0xB1, 0x59,
			0xB9, 0x59, 0x61, 0x7B, 0x09, 0x65, 0x27, 0x9B,
			0xF5, 0x9B, 0x60, 0xA7, 0x86, 0xD3, 0xE0, 0xFE
		},
		36,
		{
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
			0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
			0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
			0x20, 0x21, 0x22, 0x23
		},
		{
			0x96, 0x89, 0x3F, 0xC5, 0x5E, 0x5C, 0x72, 0x2F, 
			0x54, 0x0B, 0x7D, 0xD1, 0xDD, 0xF7, 0xE7, 0x58, 
			0xD2, 0x88, 0xBC, 0x95, 0xC6, 0x91, 0x65, 0x88, 
			0x45, 0x36, 0xC8, 0x11, 0x66, 0x2F, 0x21, 0x88, 
			0xAB, 0xEE, 0x09, 0x35
		}
	},
	{
		0x00000060,
		0xDB5672C97AA8F0B2,
		256,
		{
			0x77, 0x6B, 0xEF, 0xF2, 0x85, 0x1D, 0xB0, 0x6F,
			0x4C, 0x8A, 0x05, 0x42, 0xC8, 0x69, 0x6F, 0x6C,
			0x6A, 0x81, 0xAF, 0x1E, 0xEC, 0x96, 0xB4, 0xD3,
			0x7F, 0xC1, 0xD6, 0x89, 0xE6, 0xC1, 0xC1, 0x04
		},
		16,
		{
			0x53, 0x69, 0x6E, 0x67, 0x6C, 0x65, 0x20, 0x62, 
			0x6C, 0x6F, 0x63, 0x6B, 0x20, 0x6D, 0x73, 0x67, 
		},
		{
			0x14, 0x5A, 0xD0, 0x1D, 0xBF, 0x82, 0x4E, 0xC7, 
			0x56, 0x08, 0x63, 0xDC, 0x71, 0xE3, 0xE0, 0xC0
		}

	},
	{
		0x00FAAC24,
		0xC1585EF15A43D875,
		256,
		{
			0xF6, 0xD6, 0x6D, 0x6B, 0xD5, 0x2D, 0x59, 0xBB,
			0x07, 0x96, 0x36, 0x58, 0x79, 0xEF, 0xF8, 0x86,
			0xC6, 0x6D, 0xD5, 0x1A, 0x5B, 0x6A, 0x99, 0x74,
			0x4B, 0x50, 0x59, 0x0C, 0x87, 0xA2, 0x38, 0x84
		},
		32,
		{
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
			0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
			0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F
		},
		{
			0xF0, 0x5E, 0x23, 0x1B, 0x38, 0x94, 0x61, 0x2C, 
			0x49, 0xEE, 0x00, 0x0B, 0x80, 0x4E, 0xB2, 0xA9, 
			0xB8, 0x30, 0x6B, 0x50, 0x8F, 0x83, 0x9D, 0x6A, 
			0x55, 0x30, 0x83, 0x1D, 0x93, 0x44, 0xAF, 0x1C
		}

	},
	{
		0x001CC5B7,
		0x51A51D70A1C11148,
		256,
		{
			0xFF, 0x7A, 0x61, 0x7C, 0xE6, 0x91, 0x48, 0xE4,
			0xF1, 0x72, 0x6E, 0x2F, 0x43, 0x58, 0x1D, 0xE2,
			0xAA, 0x62, 0xD9, 0xF8, 0x05, 0x53, 0x2E, 0xDF,
			0xF1, 0xEE, 0xD6, 0x87, 0xFB, 0x54, 0x15, 0x3D
		},
		36,
		{
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
			0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
			0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
			0x20, 0x21, 0x22, 0x23
		},
		{
			0xEB, 0x6C, 0x52, 0x82, 0x1D, 0x0B, 0xBB, 0xF7, 
			0xCE, 0x75, 0x94, 0x46, 0x2A, 0xCA, 0x4F, 0xAA, 
			0xB4, 0x07, 0xDF, 0x86, 0x65, 0x69, 0xFD, 0x07, 
			0xF4, 0x8C, 0xC0, 0xB5, 0x83, 0xD6, 0x07, 0x1F, 
			0x1E, 0xC0, 0xE6, 0xB8
		}

	}
};
const aes_gcm_t aes_gcm_dec [] = {
	{
		128,
		96,
		0,
		0,
		128,
		"cf063a34d4a9a76c2c86787d3f96db71",
		"113b9785971864c83b01c787",
		"",
		"",
		"72ac8493e3a5228b5d130a69d2510e42",
		""
	},
	{
		128,
		96,
		256,
		720,
		64,
		"3be2c5cdf6ec77c36edb07488aa9e071",
		"85051fbfab58c7b041ef35dc",
		"0c772e4d9c13f7cdd13793ffd2ed0fe31056725095799e95d86639d18390e84a",
		"fdf98bbdff68d24eae6822a40f831694a5e7c7a7abd957f6fd736e6d8df736ea3787538a00b96b3d6d75bee290b16351bafa2a008f1d422a13e07dff94aa840e7b14a9a525a6252fbc40743f7cb71007f27510e635e313cd7241",
		"bb9726455cebd841cc406cfd",
		"e66048b2759ac6cff1a3a386619b2fd57d49947463b64a11cd72ce71ffa9e92d"
	},
	{
		192,
		96,
		0,
		0,
		128,
		"0e5d6e68f82f32bea3f0b69498c1a31ef6d955cd3d27a2a8",
		"caf72ee1e62e1001e8cfbc63",
		"",
		"",
		"db1a74ffb5f7de26f5742e0942b1b9cb",
		""
	},
	{
		192,
		96,
		128,
		128,
		104,
		"a3e9f15e49c800b09b9c9b69c338f1b15ba6f542ccd141f8",
		"5dfbb317c51710fa9fca5f45",
		"e75b930b5076b4b5e7f763765a54861f",
		"9b21aca7f0e212d44ac031b2d4991679",
		"639d02f88cc5920aa02809bcbf",
		"76f098bf5074aec62c2d75652f207863"
	},
	{
		256,
		96,
		0,
		0,
		128,
		"f5a2b27c74355872eb3ef6c5feafaa740e6ae990d9d48c3bd9bb8235e589f010",
		"58d2240f580a31c1d24948e9",
		"",
		"",
		"15e051a5e4a5f5da6cea92e2ebee5bac",
		""
	},
	{
		256,
		96,
		128,
		128,
		128,
		"54e352ea1d84bfe64a1011096111fbe7668ad2203d902a01458c3bbd85bfce14",
		"df7c3bca00396d0c018495d9",
		"426e0efc693b7be1f3018db7ddbb7e4d",
		"7e968d71b50c1f11fd001f3fef49d045",
		"ee8257795be6a1164d7e1d2d6cac77a7",
		"85fc3dfad9b5a8d3258e4fc44571bd3b"
	}

};

const aes_gcm_t aes_gcm_enc [] = {
	{
		128,
		96,
		0,
		0,
		128,
		"11754cd72aec309bf52f7687212e8957",
		"3c819d9a9bed087615030b65",
		"",
		"",
		"250327c674aaf477aef2675748cf6971",
		""
	},
	{
		128,
		96,
		128,
		160,
		32,
		"3b1ae3fe807438ac41d55c502a328d0c",
		"f5c78a5a51858eb5d52c85d4",
		"444465fb35d98855326c377deccda908",
		"ca3ecf694a9846352c6eae137f66e62eff812b51",
		"05a58716",
		"4730889c1132fae9af1c6ce572060902"
	}
};
